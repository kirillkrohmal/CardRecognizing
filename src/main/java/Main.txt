/*
package com.gamedev;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Iterator;
import java.util.Set;
*/

public class Main {

    public static void main(String args[]) throws IOException {
        /*
       // processFile(args[0]);
       List<String> fileNames = listFilesUsingDirectoryStream(args[0]);
       for(String file : fileNames){
            String fullName = args[0] + File.separator + file;
            parseFile(fullName);
       }
       //Iterator<String> filesIterator = fileNames.iterator();
       //while(filesIterator.hasNext()){
       //     String fullName = args[0] + File.separator + filesIterator.next();
       //     parseFile(fullName);
       //}
       */
    }
    /*

    static int getBackground(BufferedImage image, int x, int y){
        return getPixel(image, x, y)[3];
    }

    static int[] getPixel(BufferedImage image, int x, int y){
        // см. https://www.geeksforgeeks.org/image-processing-java-set-2-get-set-pixels/?ref=lbp
        int p = image.getRGB(x, y);
        int a = (p>>24) & 0xff;
        int r = (p>>16) & 0xff;
        int g = (p>>8) & 0xff;
        int b = p & 0xff;
        return new int[]{r, g, b, p}; // упаковываем сюда rgb и сам пиксель в виде 32-битного числа для удобства сравнивания
    }
*/
    //private static Ranked[] parseCards(BufferedImage image){
//        int width = image.getWidth();
//        int height = image.getHeight();

        /* Находим цвет фона крайней левой карты.
         *
         * Крайняя левая карта присутствует на каждой картинке,
         * поэтому опираясь на ее характеристики можно определить ширину и высоту
         * карт. Цвет фона не на всех картинках одинаковый, но он светлее чем 
         * нанесенные на него изображения. Поэтому нужно выяснить цвет фона и, опираясь на него,
         * всё остальное.
         *
         * Верхние края карт начинаются примерно посередине высоты изображения. Высота карт составляет 
         * примерно 1/10 высоты изображения. Левый край левой карты отстоит от левого края картинки примерно на 
         * 2 ширины карты, т.е. на 2/9 ширины изображения. Чтобы гарантированно исключить посторонние
         * артефакты, примем ширину левого поля как 0.25 ширины изображения и будем сканировать пиксели
         * примерно по диагонали первой карты в направлении ее правого нижнего угла.
         *
         * Линия сканирования, организованная таким образом, гарантированно обнаружит пиксели фона первой карты
         *
         */ 

        /*
        int areaStartX = (int) (width * .25); // отступ слева
        int areaEndX   = (int) (width * .25 + width * .05); // примем ширину картинки как 10 карт,
                                                            // отступим четверть ее ширины 
                                                            // и еще половину ширины карты, чтобы не зацепить соседнюю.
        int areaStartY = (int) (height / 2); // середина по высоте
        int areaEndY   = areaStartY + (int) (height * .1); // по высоте тоже помещается примерно 10 карт

        int[] lightestRGB = new int[]{0, 0, 0}; // для хранения rgb светлейшего пикселя
        int lightestPixel = image.getRGB(0,0);  // сырое значение пикселя
        int lightestX = 0;                      // его координаты
        int lightestY = 0;

        Ranked[] cards = new Ranked[5];

        for(int y = areaStartY; y < areaEndY; y++){
            for(int x = areaStartX; x < areaEndX; x++){
                int[] rgb = getPixel(image, x, y);
                if((rgb[0] + rgb[1] + rgb[2]) > (lightestRGB[0] + lightestRGB[1] + lightestRGB[2])){
                    lightestRGB = rgb;
                    lightestPixel = rgb[3];
                    lightestX = x;
                    lightestY = y;
                }  
            }
        }
*/
        //System.out.println("x of lightest =" + lightestX);
        //System.out.println("y of lightest =" + lightestY);

        /*
         * Теперь нужно найти непрерывную линию наибольшей длины из светлых пикселей.
         * Для этого, опираясь на координаты светлейшего, будем проверять значения слева
         * и справа от него, продвигаясь вниз на высоту карты (1/10 высоты картинки).
         * Поскольку таких линий встретится несколько, мы гарантированно найдем ширину первой карты.
         */ 

        /*
        int maxWidth = 0;

        class WidthAndXY { // класс для хранения данных о ярких линиях
            WidthAndXY(int w, int _x, int _y){
                width = w;
                x = _x;
                y = _y;
            }
            int width, x, y;
        }

        java.util.Set<WidthAndXY> widths = new java.util.HashSet<WidthAndXY>(); // коллекция линий

        for(int y = areaStartY; y < areaEndY; y++){ // сканируем вертикально 
            int p = image.getRGB(lightestX, y); // очередной пиксель
            if(p != lightestPixel) continue; // отбраковываем пиксели других цветов
            int w = 1; // ширина линии
            int x = lightestX;
            while(true){
                p = image.getRGB(++x, y); // очередной пиксель справа
                if(p != lightestPixel) break; // уперлись в пиксель другого цвета справа
                w++; // пиксели всё еще светлые, увеличиваем ширину
            }
            x = lightestX;
            while(true){ // то же самое двигаясь налево
                p = image.getRGB(--x, y);
                if(p != lightestPixel) break;
                w++;
            }
            widths.add(new WidthAndXY(w, ++x, y)); // крайний левый пиксель запоминаем как левую границу карты
        }

        int widestW = 0;
        int widestX = 0;
        int widestY = 0;

        java.util.Iterator<WidthAndXY> iter = widths.iterator();

        while(iter.hasNext()){ // находим элемент с наибольшей шириной и извлекаем его координаты и саму ширину
            WidthAndXY way = iter.next();
            if(way.width > widestW) {
                widestW = way.width;
                widestY = way.y;
                widestX = way.x;
            }
        }
        

        // есть все данные для выделения пикселей первой карты
        cards[0] = new Ranked(image.getSubimage(widestX, areaStartY, widestW, (int)(height * .15)), lightestPixel); // высоту берем с запасом, теперь точность не важна
        
        //System.out.println("width=" + widestW);
        //System.out.println("x=" + widestX);
        //System.out.println("y=" + widestY);
        int middleOfTheCard = widestX + (int)(widestW / 2);
        //System.out.println("m=" + middleOfTheCard);
        int[] onWidest = getPixel(image, widestX + 10, widestY);
        //System.out.println("b=" + (onWidest[0] + onWidest[1] + onWidest[2]));
        for(int i = 1; i < 5; i++) {
            int x = middleOfTheCard + widestW;
            //System.out.println("x=" + x);
            int[] p = getPixel(image, x, widestY);
            while(p[3] == getPixel(image, --x, widestY)[3]);
            middleOfTheCard = x + (int)(widestW / 2);
            int brightness = p[0] + p[1] + p[2];
            //System.out.println("b=" + brightness);
            // сравниваем яркость пикселя с эмпирически полученным цветом, который слишком темен, чтобы быть цветом фона.
            // Если результат положительный - мы на поверхности карты. В противном случае пошел уже темный фон.
            if(brightness > 200) cards[i] = new Ranked(image.getSubimage(x, areaStartY, widestW, (int)(height * .15)), p[3]);
        }
        return cards;
        */
  //  }

    /*

    private static List<String> listFilesUsingDirectoryStream(String dir) throws IOException {
	    Set<String> fileList = new HashSet<>();
	    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(dir))) {
	        for (Path path : stream) {
	            if(Files.isDirectory(path)) continue;
	            if(!path.getFileName().toString().endsWith(".png")) continue;
                fileList.add(path.getFileName().toString());
	        }
	    }
        List<String> sortedList = new ArrayList<String>(fileList);
        Collections.sort(sortedList);
	    return sortedList;
	}

    private static final int WIDTH = 636;
    private static final int HEIGHT = 1166;

    private static void parseFile(String fileName) throws IOException {

        BufferedImage image = null;

        try {
            File input_file = new File(fileName);

            image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);
            image = ImageIO.read(input_file);

            String result = "";
            for(Card card : parseCards(image)) {
                if(card == null) break;
                result += card.toString();
            }
            if(result.indexOf('?') > -1) System.err.println("The file " + fileName + " is not recognized: " + result + ".");
            else {
                System.out.print(fileName + ": " + result);
            }
            System.out.println();

        } catch (IOException e) {
            System.out.println("Error: " + e);
        }
    }
    */
}





